Options name: "main_stack"

Ingress pgweb:  [ { host: 'pgweb1.*' }, { host: 'pgweb2.*' } ],
        cpp:    { host: 'cpp1.*'},
        flask:  { host: 'flask1.*' },
        spring: { host: 'spring1.*' }

Deploy [:postgres], { 'placement.constraints': ['node.role == manager'] }

Service :postgres, image: 'postgres:17' do
  env POSTGRES_DB: '${POSTGRES_DB}', POSTGRES_USER: '${POSTGRES_DB_USER}', POSTGRES_PASSWORD: '${POSTGRES_DB_PASSWORD}'
  volume target: '/var/lib/postgresql/data', name: 'postgres_data'
end

DB_URL = 'postgres://${POSTGRES_DB_USER}:${POSTGRES_DB_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable'
Service :pgweb, image: 'sosedoff/pgweb:0.16.1', env: { PGWEB_DATABASE_URL: DB_URL }, ports: 8081
Service :spring, image: '${REGISTRY_HOST}/simpletracker/${CI_COMMIT_BRANCH}:latest', env: { DB_URL: DB_URL }, ports: 8080
Service :cpp, image: '${REGISTRY_HOST}/rest-cxx/${CI_COMMIT_BRANCH}:latest', env: { DB_URL: DB_URL }, ports: 8080
Service :flask, image: '${REGISTRY_HOST}/python-flask-api/${CI_COMMIT_BRANCH}:latest', env: { DB_URL: DB_URL }, ports: 8080 do
  network 'grafana-network', external: true
  logging driver: 'loki', options: {
    'loki-url': 'http://localhost:3100/loki/api/v1/push',
    'loki-batch-size': 100, 'loki-retries': 2, 'loki-max-backoff': '1000ms', 'loki-timeout': '1s',
  }
  env OTEL_EXPORTER_OTLP_ENDPOINT: "http://otlp_collector:4318/v1/traces",
      OTEL_RESOURCE_ATTRIBUTES: 'deployment.environment=%{stack-name},service.name=%{service-name}',
      OTEL_TRACE_EXPORTER: 'console,otlp',
      OTEL_LOG_LEVEL: 'debug'
end