version: '3.8'
services:
  postgres:
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      STACK_NAME: main_stack
      STACK_SERVICE_NAME: postgres
    deploy:
      placement:
        constraints:
          - node.role == manager
    init: true
    image: postgres:17
    volumes:
      - target: "/var/lib/postgresql/data"
        type: volume
        source: main_stack_postgres-volume-0
  pgweb:
    environment:
      PGWEB_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      STACK_NAME: main_stack
      STACK_SERVICE_NAME: pgweb
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.main_stack_pgweb-0.service=main_stack_pgweb-0
        - traefik.http.services.main_stack_pgweb-0.loadbalancer.server.port=8081
        - traefik.http.routers.main_stack_pgweb-0.rule=HostRegexp(`{name:pgweb1\..*}`)
        - traefik.http.routers.main_stack_pgweb-1.service=main_stack_pgweb-1
        - traefik.http.services.main_stack_pgweb-1.loadbalancer.server.port=8081
        - traefik.http.routers.main_stack_pgweb-1.rule=HostRegexp(`{name:pgweb2\..*}`)
    networks:
      default:
      ingress_routing:
    init: true
    image: sosedoff/pgweb:0.16.1
  spring:
    environment:
      DB_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      STACK_NAME: main_stack
      STACK_SERVICE_NAME: spring
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.main_stack_spring-0.service=main_stack_spring-0
        - traefik.http.services.main_stack_spring-0.loadbalancer.server.port=8080
        - traefik.http.routers.main_stack_spring-0.rule=HostRegexp(`{name:spring1\..*}`)
    networks:
      default:
      ingress_routing:
    init: true
    image: "${REGISTRY_HOST}/simpletracker/${CI_COMMIT_BRANCH}"
  cpp:
    environment:
      DB_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      STACK_NAME: main_stack
      STACK_SERVICE_NAME: cpp
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.main_stack_cpp-0.service=main_stack_cpp-0
        - traefik.http.services.main_stack_cpp-0.loadbalancer.server.port=8080
        - traefik.http.routers.main_stack_cpp-0.rule=HostRegexp(`{name:cpp1\..*}`)
    networks:
      default:
      ingress_routing:
    init: true
    image: "${REGISTRY_HOST}/rest-cxx/${CI_COMMIT_BRANCH}"
  flask:
    environment:
      DB_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otlp_collector:4318/v1/traces
      OTEL_RESOURCE_ATTRIBUTES: deployment.environment=main_stack,service.name=main_stack_flask
      OTEL_TRACE_EXPORTER: console,otlp
      OTEL_LOG_LEVEL: debug
      STACK_NAME: main_stack
      STACK_SERVICE_NAME: flask
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.main_stack_flask-0.service=main_stack_flask-0
        - traefik.http.services.main_stack_flask-0.loadbalancer.server.port=8080
        - traefik.http.routers.main_stack_flask-0.rule=HostRegexp(`{name:flask1\..*}`)
    networks:
      grafana-network:
      ingress_routing:
    init: true
    image: "${REGISTRY_HOST}/python-flask-api/${CI_COMMIT_BRANCH}"
    logging:
      driver: loki
      options:
        loki-url: http://localhost:3100/loki/api/v1/push
        loki-batch-size: 100
        loki-retries: 2
        loki-max-backoff: 1000ms
        loki-timeout: 1s
volumes:
  main_stack_postgres-volume-0:
    name: postgres_data
networks:
  ingress_routing:
    external: true
    name: ingress-routing
  grafana-network:
    external: true
