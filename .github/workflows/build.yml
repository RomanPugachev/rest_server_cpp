on:
  workflow_dispatch:
  push: { branches: [main, master, release] }

jobs:
#  build-push:
#    runs-on: ubuntu-24.04
#    permissions: { contents: read, packages: write }
#    steps:
#      - uses: actions/checkout@v3
#      - uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - uses: docker/setup-buildx-action@v2
#      - run: |
#          cd docker
#          export $(grep -v '^#' .env | xargs)
#          export REPOSITORY_OWNER=${{ github.repository_owner}}
#          export REGISTRY_HOST=ghcr.io/${REPOSITORY_OWNER,,}/${{ github.event.repository.name }}
#          export CI_COMMIT_BRANCH=${{ github.ref_name }}
#          docker buildx bake -f docker-compose.yml --push

  deploy-in-swarm:
#    needs: build-push-deploy
    runs-on: ubuntu-24.04
    steps:
    - uses: appleboy/ssh-action@master      # Installing docker environment with docker swarm; creating project directory on server
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        passphrase: ${{ secrets.SERVER_SSH_KEY_PASSPHRASE }}
        script: |
          if ! [ -x "$(command -v docker)" ]; then
            echo "Docker not found, installing..."
            apt-get update
            apt-get install -y docker.io docker-compose-plugin
          fi           
          if [ ! -d "${{ secrets.SERVER_PROJECT_PATH }}" ]; then
            mkdir -p ${{ secrets.SERVER_PROJECT_PATH }}
          fi
          if ! docker info | grep -q "Swarm: active"; then
            docker swarm init
          else
            echo "This node is already part of a swarm, skipping 'docker swarm init'."
          fi
    - uses: actions/checkout@v3
    - run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        echo "${{ secrets.SERVER_SSH_KEY_PUB }}" > ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        export $(grep -v '^#' .env | xargs)
        export REPOSITORY_OWNER=${{ github.repository_owner}}
        export REGISTRY_HOST=ghcr.io/${REPOSITORY_OWNER,,}/${{ github.event.repository.name }}
        export CI_COMMIT_BRANCH=${{ github.ref_name }}
        export SERVER_PROJECT_PATH=${{ secrets.SERVER_PROJECT_PATH }}
    
        echo "${{ secrets.SERVER_AUTHORIZE_REGISRY_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker context create remote-server --docker "host=ssh://${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}"
        docker context use remote-server 
        docker stack deploy --compose-file ./docker/docker-compose-deploy.yaml --with-registry-auth -d stack_my_app 
